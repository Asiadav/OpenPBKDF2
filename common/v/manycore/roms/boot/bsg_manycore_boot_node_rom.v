// auto-generated by bsg_ascii_to_rom.py from /home/stdavids/EE477/module2/ee477-designs/toplevels/bsg_guts_incr_gcd_cpu/testing/v/manycore_boot_node.tr; do not modify
module bsg_manycore_boot_node_rom #(parameter width_p=-1, addr_width_p=-1)
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // #######################################################################################################
                                 // #
                                 // # format:   <4 bit op> <fsb packet>
                                 // #   op = 0000: wait one cycle
                                 // #   op = 0001: send
                                 // #   op = 0010: receive & check
                                 // #   op = 0011: done; disable but do not stop
                                 // #   op = 0100: finish; stop simulation
                                 // #   op = 0101: wait for cycle ctr to reach 0
                                 // #   op = 0110: set cycle ctr
                                 // #
                                 // # fsb packet (data)
                                 // # 1 bit    75 bits
                                 // #   0       data
                                 // #
                                 // # fsb packet (control)
                                 // # 1 bit    7 bits    4 bits   64 bits
                                 // #   1      opcode    srcid    data
                                 // #
                                 // # opcodes
                                 // #   1: 0000_001 = disable
                                 // #   2: 0000_010 = enable
                                 // #   5: 0000_101 = assert reset
                                 // #   6: 0000_110 = deassert reset
                                 // #
                                 // #done:  indicated done, when all trace-replays are done, the
                                 // #       simulation will finish.
         0: data_o = width_p ' (80'b0011____0__0000000__0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000); // 0x30000000000000000000
   default: data_o = 'X;
endcase
endmodule
