#!/bin/python3

import hashlib

def make_trace_for(input: str) -> [str]:
    if (len(input) > 55):
        print("Too complex to pad")
        return []

    lines: [str] = []

    send_line: str = "0001__" + ("00000000_" * 62)

    output_str = ""
    output_line = "0010_"

    for i, c in enumerate(input):
        c_b = c.encode()[0]
        output_str += format(c_b, "02x")
        lines.append(f"# Send {c}{' (Last Character)' if (i == len(input) - 1) else ''}")
        c_binary = format(c_b, "08b")
        lines.append(send_line + ("00000001_" if (i == len(input) - 1) else "00000000_") + c_binary)
        output_line += "_" + c_binary

    lines.append(f"# Receive `{output_str}80{'00' * (55 - len(input))}{format(len(input) * 8, '08x')}`")
    lines.append(output_line + "_10000000" + ("_00000000" * (55 - len(input))) + format(len(input) * 8, "064b"))

    lines.append("")

    return lines


if __name__ == "__main__":
    lines: [str] = [
        "# Wait 3 Cycles"


        "0000__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000",
        ""
    ]

    lines += make_trace_for("ab")
    lines += make_trace_for("123456789012345678901234567890123456780123456789012345")

    lines += [
        "# Finish simulation",
        "0100__00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000"
    ]

    with open("trace.tr", "w") as f:
        f.write("\n".join(lines))
